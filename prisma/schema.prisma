generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model User { 
  id                 String    @id @default(cuid())
  name               String?
  password           String?   @db.VarChar(255)
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  firstName          String?
  lastName           String?
  phoneNumber        String?
  createdAt          DateTime  @default(now())
  role               Role      @default(user)
  accounts           Account[]
  petAdoptionStatus  PetAdoptionStatus[]
  petLogs            PetLogs[]
  likedPets          LikedPets[]
  messages           Messages[]
  room               Rooms? 
}

enum Role {
  user
  admin
}

model Pet {
  id                 String           @id @default(cuid())
  name               String           @db.VarChar(50)
  type               String           @db.VarChar(15)
  picture            String           @db.VarChar(255)
  height             Float
  weight             Float
  color              String           
  bio                String           @db.MediumText
  hypoallergenic     Boolean
  dietaryRes         String           @db.TinyText
  breed              String           @db.VarChar(50)
  createdAt          DateTime         @default(now())
  petAdoptionStatus  PetAdoptionStatus[]
  petLogs            PetLogs[]
  likedBy            LikedPets[]
}

model PetAdoptionStatus {
  id               String           @id @default(cuid())
  status           AdoptionStatus   
  petId            String           @unique
  userId           String
  createdAt        DateTime         @default(now())
  
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  pet Pet @relation(fields: [petId], references: [id],onDelete: Cascade)
  @@unique([petId,userId])
}

model PetLogs {
  id               String           @id @default(cuid())
  status           AdoptionStatus   
  petId            String?
  userId           String?
  createdAt        DateTime         @default(now())
  user User? @relation(fields: [userId], references: [id],onDelete: SetNull)
  pet Pet? @relation(fields: [petId], references: [id],onDelete: SetNull)
}
enum AdoptionStatus {
  Available
  Fostered
  Adopted
}

model LikedPets {
  userId      String
  petId       String
  createdAt   DateTime   @default(now())
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  pet Pet @relation(fields: [petId],references: [id],onDelete: Cascade)
  @@unique([userId,petId])
}

model Messages {
  id        String   @id @default(cuid())
  roomId    String?
  senderId  String?
  userName  String
  message   String
  createdAt DateTime @default(now())

  user User? @relation(fields: [senderId], references: [id], onDelete: SetNull)
  room Rooms? @relation(fields: [roomId],references: [userId],onDelete: SetNull)
}

model Rooms {
  userId    String      @id
  status    RoomStatus  @default(Open)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  messages  Messages[]

  user User @relation(fields: [userId],references: [id], onDelete: Cascade)
}

enum RoomStatus {
  Open
  Closed
  Banned
}
